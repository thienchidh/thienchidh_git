package getobj;import javax.swing.JList;import controls.IOFile;import controls.RandomColumn;import controls.SortControls;import model.IFile;import model.IRandom;import model.ISort;import model.ISortDone;import thread_runnable.BubbleRunnable;import thread_runnable.HeapRunnable;import thread_runnable.InsertRunnable;import thread_runnable.InterchangeRunnable;import thread_runnable.MergeRunnable;import thread_runnable.MyRunnable;import thread_runnable.QuickRunnable;import thread_runnable.SelectionRunnable;import thread_runnable.ShakerRunnable;import thread_runnable.ShellRunnable;import thread_runnable.TimRunnable;public class GetFeature {    private static MyRunnable    bubbleRunnable;    private static IFile         file;    private static MyRunnable    heapRunnable;    private static MyRunnable    insertRunnable;    private static MyRunnable    interchangeRunnable;    private static JList<String> lstCode;    private static MyRunnable    mergeRunnable;    private static MyRunnable    quickRunnable;    private static IRandom       random;    private static MyRunnable    selectionRunnable;    private static MyRunnable    shakerRunnable;    private static MyRunnable    shellRunnable;    private static ISort         sort;    private static MyRunnable    timRunnable;    private GetFeature() {}    public static synchronized MyRunnable getBubbleRunnable() {        if(bubbleRunnable == null) {            bubbleRunnable = new BubbleRunnable();        }        return bubbleRunnable;    }    public static synchronized IFile getFile() {        if(file == null) {            file = new IOFile();        }        return file;    }    public static synchronized MyRunnable getHeapRunnable() {        if(heapRunnable == null) {            heapRunnable = new HeapRunnable();        }        return heapRunnable;    }    public static synchronized MyRunnable getInsertRunnable() {        if(insertRunnable == null) {            insertRunnable = new InsertRunnable();        }        return insertRunnable;    }    public static synchronized MyRunnable getInterchangeRunnable() {        if(interchangeRunnable == null) {            interchangeRunnable = new InterchangeRunnable();        }        return interchangeRunnable;    }    public static synchronized ISortDone getISortDone() {        return GetUI.getMainUI();    }    public static synchronized JList<String> getLstCode() {        if(lstCode == null) {            lstCode = new JList<>();        }        return lstCode;    }    public static synchronized MyRunnable getMergeRunnable() {        if(mergeRunnable == null) {            mergeRunnable = new MergeRunnable();        }        return mergeRunnable;    }    public static synchronized MyRunnable getQuickRunnable() {        if(quickRunnable == null) {            quickRunnable = new QuickRunnable();        }        return quickRunnable;    }    public static synchronized IRandom getRandom() {        if(random == null) {            random = new RandomColumn();        }        return random;    }    public static synchronized MyRunnable getSelectionRunnable() {        if(selectionRunnable == null) {            selectionRunnable = new SelectionRunnable();        }        return selectionRunnable;    }    public static synchronized MyRunnable getShakerRunnable() {        if(shakerRunnable == null) {            shakerRunnable = new ShakerRunnable();        }        return shakerRunnable;    }    public static synchronized MyRunnable getShellRunnable() {        if(shellRunnable == null) {            shellRunnable = new ShellRunnable();        }        return shellRunnable;    }    public static synchronized ISort getSort() {        if(sort == null) {            sort = new SortControls();        }        return sort;    }    public static synchronized MyRunnable getTimRunnable() {        if(timRunnable == null) {            timRunnable = new TimRunnable();        }        return timRunnable;    }}